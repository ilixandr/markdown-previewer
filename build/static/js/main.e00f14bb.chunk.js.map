{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","setOptions","breaks","markedRenderer","Renderer","link","href","title","text","concat","preloadedContent","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","minimized","content","handleChange","bind","assertThisInitialized","handleClickMinimize","handleClickMaximize","e","setState","target","value","react_default","a","createElement","className","id","onClick","type","onChange","App_Preview","renderer","Component","Preview","_this2","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e00f14bb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport marked from 'marked';\n\n/* Marked.js: allow <br/> conversion for CR */\nmarked.setOptions({\n  breaks: true,\n});\n/* Marked.js: anchor links open in new tab */\nconst markedRenderer = new marked.Renderer();\nmarkedRenderer.link = function (href, title, text) {\n  return `<a target=\"_blank\" href=\"${href}\">${text}</a>`;\n}\n\nconst preloadedContent = `Marked - Markdown Parser\n========================\n\n[Marked] lets you convert [Markdown] into HTML.  Markdown is a simple text format whose goal is to be very easy to read and write, even when not converted to HTML.\n\nHow To Use The Demo\n-------------------\n\n1. Type in stuff on the left.\n2. See the live updates on the right.\n\nThat's it.  Pretty simple.  There's also a drop-down option in the upper right to switch between various views:\n\n- **Preview:**  A live display of the generated HTML as it would render in a browser.\n- **HTML Source:**  The generated HTML before your browser makes it pretty.\n- **Lexer Data:**  What [marked] uses internally, in case you like gory stuff like this.\n- **Quick Reference:**  A brief run-down of how to format things using markdown.\n\nWhy Markdown?\n-------------\n\nIt's easy.  It's not overly bloated, unlike HTML.  Also, as the creator of [markdown] says,\n\n> The overriding design goal for Markdown's\n> formatting syntax is to make it as readable\n> as possible. The idea is that a\n> Markdown-formatted document should be\n> publishable as-is, as plain text, without\n> looking like it's been marked up with tags\n> or formatting instructions.\n\n[Marked]: https://github.com/markedjs/marked/\n[Markdown]: http://daringfireball.net/projects/markdown/\n\nInline \\`code\\` has \\`back-ticks around\\` it.\n\nHere's some JS code:\n\n\\`\\`\\`javascript\nvar s = \"JavaScript is great!\";\nalert(s);\n\\`\\`\\`\n\nMade with:\n\n\n[logoreact]: https://goo.gl/Umyytc \"react.js logo\"\n[logomarked]: https://marked.js.org/img/logo-black.svg \"marked.js logo\"\n![alt text][logoreact] -and- ![alt text][logomarked]\n`;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      minimized: \"editor-toolbar-min\",\n      content: preloadedContent\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClickMinimize = this.handleClickMinimize.bind(this);\n    this.handleClickMaximize = this.handleClickMaximize.bind(this);\n  }\n  handleChange(e) {\n    this.setState({content: e.target.value});\n  }\n  handleClickMinimize(){\n    this.setState({minimized: \"editor-toolbar-min\"});\n  }\n  handleClickMaximize(){\n    this.setState({minimized: \"editor-toolbar-max\"})\n  }\n  render() {\n    return (\n      <div className=\"wraper fluid-container\">\n        <div id=\"editor-toolbar\" className={this.state.minimized}>\n          <i className=\"fab fa-free-code-camp\"> Editor</i>\n          <span>\n            <i onClick={this.handleClickMinimize} className=\"fa fa-window-minimize\"></i>\n            <i onClick={this.handleClickMaximize} className=\"fa fa-window-maximize\"></i>\n          </span>\n        </div>\n        <textarea type=\"text\" id=\"editor\" className={this.state.minimized} value={this.state.content} onChange={this.handleChange}/>\n        <Preview content={marked(this.state.content, {renderer: markedRenderer})}/>\n      </div>\n    );\n  }\n};\n\nclass Preview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      minimized: \"preview-toolbar-min\"\n    }\n    this.handleClickMinimize = this.handleClickMinimize.bind(this);\n    this.handleClickMaximize = this.handleClickMaximize.bind(this);\n  }\n  handleClickMinimize(){\n    this.setState({minimized: \"preview-toolbar-min\"});\n  }\n  handleClickMaximize(){\n    this.setState({minimized: \"preview-toolbar-max\"})\n  }\n  render() {\n    return (\n      <div className=\"fluid-container\">\n        <div className=\"spacer\"></div>\n        <div id=\"preview-toolbar\" className={this.state.minimized}>\n          <i className=\"fab fa-free-code-camp\"> Previewer</i>\n          <span>\n            <i onClick={this.handleClickMinimize} className=\"fa fa-window-minimize\"></i>\n            <i onClick={this.handleClickMaximize} className=\"fa fa-window-maximize\"></i>\n          </span>\n        </div>\n        <div id=\"preview\" className={this.state.minimized} dangerouslySetInnerHTML={{__html: this.props.content}}></div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('reactor'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}